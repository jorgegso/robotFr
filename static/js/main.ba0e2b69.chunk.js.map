{"version":3,"sources":["serviceWorker.js","components/Card.js","components/SearchBox.js","components/CardList.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","SearchBox","searchChange","type","placeholder","onChange","CardList","robots","map","user","i","key","Scroll","props","style","overflowY","border","height","children","ErrorBounty","state","hasError","error","this","serState","Component","App","onRequestRobots","onSearchChange","searchField","isPending","filteredRobots","filter","robot","toLowerCase","includes","ErrorBoundry","connect","searchRobots","requestRobots","isPendig","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","inPending","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.ba0e2b69.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n\r\n      <input\r\n        className='pa3 ba b--green bg-light-blue sans-serif'\r\n        type='search'\r\n        placeholder='search robots' \r\n        onChange={searchChange}\r\n        />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport Card from './Card';\r\nimport SearchBox from './SearchBox';\r\n\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n  // if (true) {\r\n  //   throw new Error('nooooooo');\r\n  // }\r\n  return (\r\n    < div >\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n          />\r\n        );\r\n      })\r\n      }\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n\r\n","import React from 'react';\r\n// import { property } from 'lodash';\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBounty extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error) {\r\n    this.serState({hasError:true})\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Oooops. That is not good </h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBounty;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\n// import { robots } from '../robots';\r\nimport SearchBox from '../components/SearchBox';\r\n// import { render } from '@testing-library/react';\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\n\r\n// import { setSerchField } from '../actions';\r\n// import { requestRobots } from '../reducers';\r\nimport { setSearchField, requestRobots } from '../actions'\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPendig: state.requestRobots.isPendig,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  \r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n  render() {\r\n    // const { robots } = this.state;\r\n    const { onSearchChange, searchField, robots, isPending } = this.props\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n    return isPending ?\r\n      <h1>Loading</h1> :\r\n      (\r\n        <div className='tc'>\r\n          <h1 className='f2'>RobotsFraids</h1>\r\n          <SearchBox searchChange={onSearchChange} />\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <CardList robots={filteredRobots} />\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from './constants'\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: 'CHANGE_SEARCH_FIELD',\r\n  payload: text\r\n})\r\n\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from './constants'\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  inPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true })\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, { error: action.payload , isPending: false})\r\n    default:\r\n      return state;\r\n}\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"tachyons\"; // modulo de class de css \r\nimport App from './containers/App';\r\n\r\n// redux\r\nimport { searchRobots, requestRobots } from './reducers';\r\nimport { Provider } from 'react-redux'\r\nimport { createStore, combineReducers } from 'redux';\r\n// redux-logger -- Middleware\r\nimport { applyMiddleware } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\n\r\n// redux-thunk ------\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\n\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst store =\r\n  createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>, document.getElementById('root')\r\n);\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}